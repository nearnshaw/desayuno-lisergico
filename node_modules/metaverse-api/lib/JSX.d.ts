import { ISimplifiedNode, Vector3Component, TransitionComponent, SkeletalAnimationComponent, IBillboardModes } from './interfaces';
declare global {
    namespace JSX {
        type Element = ISimplifiedNode;
        type ColorComponent = string;
        type BaseEntity = {
            /**
             * The ID is used to attach events and identify the entity in the scene tree
             */
            id?: string;
            /**
             * Moves the entity center to that point
             */
            position?: Vector3Component;
            /**
             * Scales the entity in three dimensions
             */
            scale?: Vector3Component | number;
            /**
             * Rotates the entity
             * The `x,y,z` components are degrees (0°-360°), and every component represents the rotation in that axis
             */
            rotation?: Vector3Component;
            /**
             * Used to differentiate similar entities in lists
             */
            key?: string | number;
            /**
             * Defines if the entity and its children should be rendered
             */
            visible?: boolean;
            /**
             * Used to animate the transitions in the same fashion as CSS
             */
            transition?: TransitionComponent;
            /**
             * Billboard defines a behavior that makes the entity face the camera in any moment.
             * There are three combinable types of camera facing options defined in the object BillboardModes.
             *   BILLBOARDMODE_NONE: 0
             *   BILLBOARDMODE_X: 1
             *   BILLBOARDMODE_Y: 2
             *   BILLBOARDMODE_Z: 4
             *   BILLBOARDMODE_ALL: 7
             *
             * To combine billboard types write those in the form:
             *   BillboardModes.BILLBOARDMODE_X | BillboardModes.BILLBOARDMODE_Y
             */
            billboard?: IBillboardModes;
        };
        type MaterialDescriptorEntity = {
            id: string;
            /**
             * Opacity.
             */
            alpha?: number;
            /**
             * The color of a material in ambient lighting.
             */
            ambientColor?: ColorComponent;
            /**
             * AKA Diffuse Color in other nomenclature.
             */
            albedoColor?: ColorComponent;
            /**
             * AKA Specular Color in other nomenclature.
             */
            reflectivityColor?: ColorComponent;
            /**
             * The color reflected from the material.
             */
            reflectionColor?: ColorComponent;
            /**
             * The color emitted from the material.
             */
            emissiveColor?: ColorComponent;
            /**
             * Specifies the metallic scalar of the metallic/roughness workflow.
             * Can also be used to scale the metalness values of the metallic texture.
             */
            metallic?: number;
            /**
             * Specifies the roughness scalar of the metallic/roughness workflow.
             * Can also be used to scale the roughness values of the metallic texture.
             */
            roughness?: number;
            /**
             * Texture applied as material.
             */
            albedoTexture?: string;
            /**
             * Intensity of the direct lights e.g. the four lights available in scene.
             * This impacts both the direct diffuse and specular highlights.
             */
            directIntensity?: number;
        };
        type MaterialEntity = BaseEntity & {
            /**
             * Color of the vertices
             */
            color?: string | number;
            /**
             * Material selector
             */
            material?: string;
            /**
             * Set to true to turn off the collider for the entity.
             */
            ignoreCollisions?: boolean;
        };
        type SystemEntity = BaseEntity & {
            src: string;
        };
        type GltfEntity = BaseEntity & {
            /**
             * The source URL of the .gltf or .glb model, required
             */
            src: string;
            /**
             * List of weighted skeletal animations
             */
            skeletalAnimation?: SkeletalAnimationComponent;
        };
        type ObjEntity = BaseEntity & {
            src: string;
        };
        type CollectibleEntity = BaseEntity & {
            contractAlias: string;
            marketplaceAlias?: string;
            tokenId: string;
            amount?: number;
            currency?: number;
            buyable?: boolean;
        };
        type TextEntity = BaseEntity & {
            outlineWidth?: number;
            outlineColor?: string;
            color?: string;
            fontFamily?: string;
            fontSize?: number;
            opacity?: number;
            value: string;
            lineSpacing?: string;
            lineCount?: number;
            resizeToFit?: boolean;
            textWrapping?: boolean;
            shadowBlur?: number;
            shadowOffsetX?: number;
            shadowOffsetY?: number;
            shadowColor?: string;
            zIndex?: number;
            hAlign?: string;
            vAlign?: string;
            width?: number;
            height?: number;
        };
        type VideoEntity = BaseEntity & {
            src: string;
            height?: number;
            width?: number;
            play?: boolean;
            loop?: boolean;
            volume?: number;
        };
        type CylinderEntity = MaterialEntity & {
            /**
             * Radius (meters)
             */
            radius?: number;
            /**
             * How much of the arc should be rendered, 360 by default (degrees)
             */
            arc?: number;
            /**
             * Radius of the top face (meters)
             */
            radiusTop?: number;
            /**
             * Radius of the bottom face (meters)
             */
            radiusBottom?: number;
            /**
             * Radial segments of the geometry. 4 will render a tetrahedron.
             */
            segmentsRadial?: number;
            /**
             * Vertical segments of the geometry
             */
            segmentsHeight?: number;
            /**
             * Render caps
             */
            openEnded?: boolean;
        };
        interface IntrinsicElements {
            ['x-stub']: {
                boolean?: boolean;
                object?: Vector3Component;
                array?: [number, number, number];
                string?: string;
                key?: string;
            };
            material: MaterialDescriptorEntity;
            scene: BaseEntity;
            entity: BaseEntity;
            box: MaterialEntity;
            circle: MaterialEntity & {
                segments?: number;
                arc?: number;
            };
            ['gltf-model']: GltfEntity;
            ['obj-model']: ObjEntity;
            plane: MaterialEntity;
            sphere: MaterialEntity;
            cylinder: CylinderEntity;
            cone: CylinderEntity;
            collectible: CollectibleEntity;
            text: TextEntity;
            system: SystemEntity;
            video: VideoEntity;
        }
    }
}
