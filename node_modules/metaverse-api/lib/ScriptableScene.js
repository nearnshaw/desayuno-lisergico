"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const future_1 = require("./utils/future");
exports.defer = Promise.resolve().then.bind(Promise.resolve());
/** Managed queue of dirty components to be re-rendered */
let items = [];
function enqueueRender(scene) {
    if (!scene._dirty) {
        scene._dirty = true;
        if (items.push(scene) === 1) {
            exports.defer(rerender);
        }
    }
}
function rerender() {
    let p;
    const list = items;
    items = [];
    // tslint:disable-next-line:no-conditional-assignment
    while ((p = list.pop())) {
        if (p._dirty)
            renderScriptableScene(p);
    }
}
function filterNonFalsy($) {
    return !!$;
}
function recursiveRender(tree) {
    if (typeof tree === 'string') {
        // tslint:disable-next-line:no-console
        console.error('Warning, you are trying to render a text');
        return null;
    }
    if (typeof tree.tag === 'function') {
        const hoc = tree.tag;
        if (hoc.prototype && hoc.prototype.render) {
            throw new Error('Only function components are allowed');
        }
        return hoc(Object.assign({}, tree.attrs, { children: tree.children }));
    }
    if (!tree || !tree.tag)
        return null;
    return {
        tag: tree.tag,
        attrs: tree.attrs,
        children: tree.children.map(recursiveRender).filter(filterNonFalsy)
    };
}
exports.recursiveRender = recursiveRender;
/**
 * Render a ScriptableScene, triggering necessary lifecycle events and taking High-Order ScriptableScenes into account.
 * @param {ScriptableScene} scene
 * @internal
 */
function renderScriptableScene(scene, force) {
    let props = scene.props;
    let state = scene.state;
    let previousProps = scene.prevProps || props;
    let previousState = scene.prevState || state;
    let skip = false;
    const isUpdate = !!scene._component;
    // if updating
    if (isUpdate) {
        scene.props = previousProps;
        scene.state = previousState;
        if (!force && scene.shouldSceneUpdate && scene.shouldSceneUpdate(props, state) === false) {
            skip = true;
        }
        scene.props = props;
        scene.state = state;
    }
    scene.prevProps = scene.prevState = null;
    scene._dirty = false;
    if (!skip) {
        let rendererResult = scene.render(props, state);
        if (!('then' in rendererResult && 'catch' in rendererResult)) {
            rendererResult = Promise.resolve(rendererResult);
        }
        rendererResult
            .then(recursiveRender)
            .then(async (rendered) => {
            if (!rendered) {
                throw new Error('the async render() method yielded an empty result');
            }
            scene._component = rendered;
            if (scene.sceneDidUpdate) {
                await scene.sceneDidUpdate(previousProps, previousState);
            }
            await scene.connectionFuture;
            try {
                // TODO(agus): diff/patch
                await scene.entityController.render(rendered);
            }
            catch (e) {
                if (e.message === _1.Constants.ReplaceWholeTreeException) {
                    await scene.entityController.render(rendered);
                }
                else {
                    throw e;
                }
            }
        })
            .catch(err => {
            // tslint:disable-next-line:no-console
            console.error(err);
        });
    }
}
exports.renderScriptableScene = renderScriptableScene;
/**
 * Base Scene class.
 * Provides `setState()` and `forceUpdate()`, which trigger rendering.
 * @public
 *
 * @example
 * class MyFoo extends ScriptableScene {
 *   async render() {
 *     return <sphere />;
 *   }
 * }
 */
class ScriptableScene extends _1.Script {
    constructor() {
        super(...arguments);
        this._dirty = true;
        this.prevProps = null;
        this.prevState = null;
        this._component = null;
        this.state = {};
        this.connectionFuture = future_1.future();
    }
    /**
     * Update scene state by copying properties from `state` to `this.state`.
     * @param {object} state A hash of state properties to update with new values
     */
    setState(state) {
        let s = this.state;
        if (!this.prevState)
            this.prevState = Object.assign({}, s);
        Object.assign(s, typeof state === 'function' ? state(s, this.props) : state);
        enqueueRender(this);
    }
    /**
     * Immediately perform a synchronous re-render of the component.
     */
    forceUpdate() {
        renderScriptableScene(this, true);
    }
    /**
     * It makes a subscription to remote events, those events occur in the context of the game and are sent thru the wire
     * protocol.
     *
     * @param event name of the remote event to listen
     * @param handler an async
     */
    subscribeTo(event, handler) {
        // tslint:disable-next-line:no-floating-promises
        this.connectionFuture.then(() => {
            this.eventSubscriber.on(event, x => {
                const ret = handler(x.data);
                if (ret && 'catch' in ret && typeof ret.catch === 'function') {
                    ret.catch(err => this.emit('error', err));
                }
            });
        });
    }
    async systemDidEnable() {
        this.props = (await this.entityController.getOwnAttributes());
        // we create an event subscriber
        this.eventSubscriber = new _1.EventSubscriber(this.entityController);
        this.on('SIGKILL', () => {
            if (this.sceneWillUnmount) {
                this.sceneWillUnmount();
            }
        });
        this.subscribeTo('setAttributes', newProps => {
            this.prevProps = this.props;
            this.props = newProps;
            enqueueRender(this);
        });
        this.connectionFuture.resolve(this);
        renderScriptableScene(this, true);
        if (this.sceneDidMount) {
            await this.sceneDidMount();
        }
    }
}
__decorate([
    _1.inject('EntityController'),
    __metadata("design:type", Object)
], ScriptableScene.prototype, "entityController", void 0);
exports.ScriptableScene = ScriptableScene;
//# sourceMappingURL=data:application/json;base64,