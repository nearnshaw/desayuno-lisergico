"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const textAttributeParser_1 = require("./utils/textAttributeParser");
const Parser = require('parse5/lib/parser');
// Shorthands
function parse(html, options) {
    const parser = new Parser(options);
    return parser.parse(html);
}
function walk(node, callback) {
    if (callback(node) === false) {
        return false;
    }
    else {
        let childNode;
        let i = 0;
        if (typeof node.childNodes !== 'undefined') {
            i = 0;
            childNode = node.childNodes[i];
        }
        while (childNode !== undefined) {
            if (walk(childNode, callback) === false) {
                return false;
            }
            else {
                childNode = node.childNodes[++i];
            }
        }
    }
}
exports.walk = walk;
function findNode(root, name) {
    let foundNode = null;
    walk(root, function (node) {
        if (node.nodeName === name) {
            foundNode = node;
            return false;
        }
    });
    return foundNode;
}
exports.findNode = findNode;
function simplifyNode(root) {
    return {
        tag: root.nodeName,
        children: root.childNodes && root.childNodes.map($ => simplifyNode($)),
        attrs: root.attrs && root.attrs.reduce((prev, curr) => (Object.assign({}, prev, { [curr.name]: curr.value })), {})
    };
}
exports.simplifyNode = simplifyNode;
function parseAFrame(html) {
    const root = parse(html);
    const scene = findNode(root, 'scene');
    if (!scene) {
        throw new Error('The XML does not contain a <scene> tag');
    }
    // remove `node.tag like #text` recursively
    walk(scene, function (node) {
        node.childNodes = node.childNodes.filter($ => !$.nodeName.startsWith('#'));
    });
    return textAttributeParser_1.processSimplifiedNode(simplifyNode(scene));
}
exports.parseAFrame = parseAFrame;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYS1mcmFtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hLWZyYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUVBQW1FO0FBQ25FLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0FBUTNDLGFBQWE7QUFDYixlQUFlLElBQVksRUFBRSxPQUFhO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRWxDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMzQixDQUFDO0FBRUQsY0FBcUIsSUFBVyxFQUFFLFFBQXVDO0lBQ3ZFLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssRUFBRTtRQUM1QixPQUFPLEtBQUssQ0FBQTtLQUNiO1NBQU07UUFDTCxJQUFJLFNBQVMsQ0FBQTtRQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUVULElBQUksT0FBUSxJQUFZLENBQUMsVUFBVSxLQUFLLFdBQVcsRUFBRTtZQUNuRCxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ0wsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDL0I7UUFFRCxPQUFPLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDOUIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEtBQUssRUFBRTtnQkFDdkMsT0FBTyxLQUFLLENBQUE7YUFDYjtpQkFBTTtnQkFDTCxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQ2pDO1NBQ0Y7S0FDRjtBQUNILENBQUM7QUFwQkQsb0JBb0JDO0FBRUQsa0JBQXlCLElBQVcsRUFBRSxJQUFZO0lBQ2hELElBQUksU0FBUyxHQUFpQixJQUFJLENBQUE7SUFFbEMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFTLElBQUk7UUFDdEIsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksRUFBRTtZQUMxQixTQUFTLEdBQUcsSUFBSSxDQUFBO1lBQ2hCLE9BQU8sS0FBSyxDQUFBO1NBQ2I7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUVGLE9BQU8sU0FBUyxDQUFBO0FBQ2xCLENBQUM7QUFYRCw0QkFXQztBQUVELHNCQUE2QixJQUFXO0lBQ3RDLE9BQU87UUFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVE7UUFDbEIsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxtQkFBTSxJQUFJLElBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBRyxFQUFFLEVBQUUsQ0FBQztLQUNuRyxDQUFBO0FBQ0gsQ0FBQztBQU5ELG9DQU1DO0FBRUQscUJBQTRCLElBQVk7SUFDdEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBRXhCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFFckMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQTtLQUMxRDtJQUVELDJDQUEyQztJQUMzQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVMsSUFBSTtRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQzVFLENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTywyQ0FBcUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUNuRCxDQUFDO0FBZkQsa0NBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU2ltcGxpZmllZE5vZGUgfSBmcm9tICcuL2ludGVyZmFjZXMnXG5pbXBvcnQgeyBwcm9jZXNzU2ltcGxpZmllZE5vZGUgfSBmcm9tICcuL3V0aWxzL3RleHRBdHRyaWJ1dGVQYXJzZXInXG5jb25zdCBQYXJzZXIgPSByZXF1aXJlKCdwYXJzZTUvbGliL3BhcnNlcicpXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5vZGUge1xuICBjaGlsZE5vZGVzOiBJTm9kZVtdXG4gIG5vZGVOYW1lOiBzdHJpbmdcbiAgYXR0cnM6IHsgbmFtZTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH1bXVxufVxuXG4vLyBTaG9ydGhhbmRzXG5mdW5jdGlvbiBwYXJzZShodG1sOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zKVxuXG4gIHJldHVybiBwYXJzZXIucGFyc2UoaHRtbClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhbGsobm9kZTogSU5vZGUsIGNhbGxiYWNrOiAobm9kZTogSU5vZGUpID0+IHZvaWQgfCBmYWxzZSkge1xuICBpZiAoY2FsbGJhY2sobm9kZSkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSB7XG4gICAgbGV0IGNoaWxkTm9kZVxuICAgIGxldCBpID0gMFxuXG4gICAgaWYgKHR5cGVvZiAobm9kZSBhcyBhbnkpLmNoaWxkTm9kZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpID0gMFxuICAgICAgY2hpbGROb2RlID0gbm9kZS5jaGlsZE5vZGVzW2ldXG4gICAgfVxuXG4gICAgd2hpbGUgKGNoaWxkTm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAod2FsayhjaGlsZE5vZGUsIGNhbGxiYWNrKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZE5vZGUgPSBub2RlLmNoaWxkTm9kZXNbKytpXVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZE5vZGUocm9vdDogSU5vZGUsIG5hbWU6IHN0cmluZykge1xuICBsZXQgZm91bmROb2RlOiBJTm9kZSB8IG51bGwgPSBudWxsXG5cbiAgd2Fsayhyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZU5hbWUgPT09IG5hbWUpIHtcbiAgICAgIGZvdW5kTm9kZSA9IG5vZGVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gZm91bmROb2RlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGlmeU5vZGUocm9vdDogSU5vZGUpOiBJU2ltcGxpZmllZE5vZGUge1xuICByZXR1cm4ge1xuICAgIHRhZzogcm9vdC5ub2RlTmFtZSxcbiAgICBjaGlsZHJlbjogcm9vdC5jaGlsZE5vZGVzICYmIHJvb3QuY2hpbGROb2Rlcy5tYXAoJCA9PiBzaW1wbGlmeU5vZGUoJCkpLFxuICAgIGF0dHJzOiByb290LmF0dHJzICYmIHJvb3QuYXR0cnMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiAoeyAuLi5wcmV2LCBbY3Vyci5uYW1lXTogY3Vyci52YWx1ZSB9KSwge30pXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQUZyYW1lKGh0bWw6IHN0cmluZyk6IElTaW1wbGlmaWVkTm9kZSB7XG4gIGNvbnN0IHJvb3QgPSBwYXJzZShodG1sKVxuXG4gIGNvbnN0IHNjZW5lID0gZmluZE5vZGUocm9vdCwgJ3NjZW5lJylcblxuICBpZiAoIXNjZW5lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgWE1MIGRvZXMgbm90IGNvbnRhaW4gYSA8c2NlbmU+IHRhZycpXG4gIH1cblxuICAvLyByZW1vdmUgYG5vZGUudGFnIGxpa2UgI3RleHRgIHJlY3Vyc2l2ZWx5XG4gIHdhbGsoc2NlbmUsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2RlLmNoaWxkTm9kZXMgPSBub2RlLmNoaWxkTm9kZXMuZmlsdGVyKCQgPT4gISQubm9kZU5hbWUuc3RhcnRzV2l0aCgnIycpKVxuICB9KVxuXG4gIHJldHVybiBwcm9jZXNzU2ltcGxpZmllZE5vZGUoc2ltcGxpZnlOb2RlKHNjZW5lKSlcbn1cbiJdfQ==