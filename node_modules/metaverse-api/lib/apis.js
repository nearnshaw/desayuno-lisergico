"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU2ltcGxpZmllZE5vZGUsIElMYW5kIH0gZnJvbSAnLidcbmltcG9ydCB7IERpZmZQYWNrZXQgfSBmcm9tICcuL2ludGVybmFsL3R5cGVzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhcmNlbElkZW50aXR5IHtcbiAgZ2V0UGFyY2VsKCk6IFByb21pc2U8eyB4OiBudW1iZXI7IHk6IG51bWJlcjsgbGFuZDogSUxhbmQgfT5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlDb250cm9sbGVyIHtcbiAgLyoqXG4gICAqIE92ZXJ3cml0ZXMgdGhlIHNjZW5lIGJ5IHJlbmRlcmluZyBwcm92aWRlZCBOb2RlXG4gICAqIEBwYXJhbSBlbGVtZW50XG4gICAqL1xuICByZW5kZXIoZWxlbWVudDogSVNpbXBsaWZpZWROb2RlIHwgRGlmZlBhY2tldCk6IFByb21pc2U8dm9pZD5cblxuICAvKipcbiAgICogU3Vic2NyaWJlcyB0byBldmVudHMgZGlzcGF0Y2hlZCBieSB0aGUgRW50aXR5Q29udHJvbGxlclxuICAgKiBVc2UgaXQgdG8gbGlzdGVuIHRvIGV2ZW50cyBmcm9tIHRoZSBzY2VuZSAobGlrZSBgY2xpY2tgKVxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIHN1YnNjcmliZShldmVudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc3Vic2NyaXB0aW9uIHRvIGFuIGV2ZW50XG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgdW5zdWJzY3JpYmUoZXZlbnQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD5cblxuICAvKipcbiAgICogUGFzc2VzIGF0dHJpYnV0ZXMgdG8gdGhlIGNvbXBvbmVudHMgb2YgYW4gc3BlY2lmaWMgZW50aXR5XG4gICAqXG4gICAqIFZhbHVlcyBtdXN0IGJlIHNwZWNpZmllZCBpbiB0aGUgc2FtZSB3YXkgYXMgaW4gdGhlIEVzdGF0ZSBkZWZpbml0aW9uIHN5bnRheFxuICAgKlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogYGBgXG4gICAqIHtcbiAgICogICBwb3NpdGlvbjoge3g6IDAsIHk6MCwgejowfSxcbiAgICogICBzb3VuZDoge3NyYzogXCJzb3VuZHMvY2Fybml2YWxyaWRlcy5vZ2dcIiwgYXV0b3BsYXk6IHRydWUgfVxuICAgKiAgIC8vIGV0Yy4uLlxuICAgKiB9XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gZW50aXR5SWQgVGhlIHZhbHVlIHNwZWNpZmllZCBpbiB0aGUgYGlkYCBhdHRyaWJ1dGUgb2YgdGhlIGVudGl0eVxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBbiBvYmplY3QgY29udGFpbmluZyBhdHRyaWJ1dGVzIGFuZCB0aGVpciB2YWx1ZXMgYXMgc3RyaW5nc1xuICAgKi9cbiAgc2V0RW50aXR5QXR0cmlidXRlcyhlbnRpdHlJZDogc3RyaW5nLCBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBmb3IgYW4gZXNwZWNpZmljIGF0dHJpYnV0ZSBvZiBhbiBlbnRyaXR5XG4gICAqIEBwYXJhbSBlbnRpdHlJZCBUaGUgdmFsdWUgc3BlY2lmaWVkIGluIHRoZSBgaWRgIGF0dHJpYnV0ZSBvZiB0aGUgZW50aXR5XG4gICAqIEBwYXJhbSBhdHRyaWJ1dGUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSwgZm9yIGV4YW1wbGU6IGBwb3NpdGlvbmBcbiAgICovXG4gIGdldEVudGl0eUF0dHJpYnV0ZShlbnRpdHlJZDogc3RyaW5nLCBhdHRyaWJ1dGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhdHRyaWJ1dGVzIGZvciB0aGlzIHNjcmlwdFxuICAgKlxuICAgKiBVc2VmdWwgd2hlbiByZXRyaWV2aW5nIGF0dHJpYnV0ZXMgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSBgc2NyaXB0YCBlbnRpdHlcbiAgICovXG4gIGdldE93bkF0dHJpYnV0ZXMoKTogUHJvbWlzZTx7IFtrZXk6IHN0cmluZ106IGFueSB9PlxuXG4gIC8qKiBFdmVudCBoYW5kbGVyIGZvciBzdWJzY3JpcHRpb24gZXZlbnRzICovXG4gIG9uU3Vic2NyaWJlZEV2ZW50KGZuOiBhbnkpOiB2b2lkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXRoZXJldW1Db250cm9sbGVyIHtcbiAgLyoqXG4gICAqIFVzZSBTZXJ2aWNlTG9jYXRvciBjb250cmFjdCB0byByZXNvbHZlIGFuIGNvbnRyYWN0IG5hbWVzcGFjZVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtuYW1lc3BhY2VdIC0gbmFtZXNwYWNlIHRvIHJlc29sdmVcbiAgICogQHJldHVybiB7c3RyaW5nfSAtIEFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0XG4gICAqL1xuICByZXNvbHZlQWRkcmVzcyhuYW1lc3BhY2U6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPlxuXG4gIC8qKlxuICAgKiBDaGVjayBhIEVSQzcyMSBjb250cmFjdCBmb3Igb3duZXJzaGlwIHN0YXR1c1xuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtvd25lckFkZHJlc3NdIC0gbmFtZXNwYWNlIHRvIHJlc29sdmVcbiAgICogQHBhcmFtICB7c3RyaW5nfSBbdG9rZW5JZF0gLSB0b2tlbklkIGluIHRoZSByZWdpc3RyeSBjb250cmFjdFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtyZWdpc3RyeUFkZHJlc3NdIC0gYWRkcmVzcyBvZiB0aGUgRVJDNzIxIERBUi5cbiAgICogQHJldHVybiB7c3RyaW5nfSAtIHRydWUgaWYgcHJvdmlkZWQgYWRkcmVzcyBpcyB0aGUgb3duZXIgb2YgdGhlIGFzc2V0LlxuICAgKi9cbiAgaXNPd25lck9mQ29sbGVjdGlibGUob3duZXJBZGRyZXNzOiBzdHJpbmcsIHRva2VuSWQ6IHN0cmluZywgcmVnaXN0cnlBZGRyZXNzOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGEgb3JkZXIgZnJvbSB0aGUgbWFya2V0cGxhY2UgY29udHJhY3RcbiAgICogQHBhcmFtICB7c3RyaW5nfSBbYXNzZXRJZF0gLSBORlQgYXNzZXQgaWQuXG4gICAqIEBwYXJhbSAge251bWJlcn0gW2Ftb3VudF0gLSBFeGFjdCBhbW91bnQgb2YgdGhlIG9yZGVyLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFttYXJrZXRwbGFjZUFkZHJlc3NdIC0gTWFya2V0cGxhY2UgY29udHJhY3QgYWRkcmVzcy5cbiAgICovXG4gIGJ1eUNvbGxlY3RpYmxlKGFzc2V0SWQ6IHN0cmluZywgYW1vdW50OiBudW1iZXIsIG1hcmtldHBsYWNlQWRkcmVzczogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG5cbiAgLyoqXG4gICAqIFJlcXVpcmVzIGEgZ2VuZXJpYyBwYXltZW50IGluIEVUSCBvciBFUkMyMC5cbiAgICogQHBhcmFtICB7c3RyaW5nfSBbdG9BZGRyZXNzXSAtIE5GVCBhc3NldCBpZC5cbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYW1vdW50XSAtIEV4YWN0IGFtb3VudCBvZiB0aGUgb3JkZXIuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gW2N1cnJlbmN5XSAtIEVUSCBvciBFUkMyMCBzdXBwb3J0ZWQgdG9rZW4gc3ltYm9sXG4gICAqL1xuICByZXF1aXJlUGF5bWVudCh0b0FkZHJlc3M6IHN0cmluZywgYW1vdW50OiBudW1iZXIsIGN1cnJlbmN5OiBzdHJpbmcpOiBQcm9taXNlPGFueT5cblxuICAvKipcbiAgICogV2FpdHMgZm9yIG1pbmVkIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtjdXJyZW5jeV0gLSBDdXJyZW5jeSB1c2VkIGZvciBwYXltZW50LlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFt0eEhhc2hdIC0gVHJhbnNhY3Rpb24gaGFzaC5cbiAgICogQHBhcmFtICB7c3RyaW5nfSBbcmVjZWl2aW5nQWRkcmVzc10gLSBBZGRyZXNzIG9mIHRoZSB1c2VyIHRoYXQgcmVjZWl2ZXMgdGhpcyBwYXltZW50LlxuICAgKiBAcmV0dXJuIHthbnl9IC0gUHJvbWlzZSBvZiB0aGUgdHggcmVjZXBpdC5cbiAgICovXG4gIHdhaXRGb3JNaW5lZFR4KGN1cnJlbmN5OiBzdHJpbmcsIHR4SGFzaDogc3RyaW5nLCByZWNlaXZpbmdBZGRyZXNzOiBzdHJpbmcpOiBQcm9taXNlPGFueT5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGFyYWN0ZXJzSWRlbnRpdHkge31cblxuZXhwb3J0IGludGVyZmFjZSBTb3VuZENvbnRyb2xsZXIge1xuICAvKipcbiAgICogQXV0b21hdGljYWxseSBwbGF5cyBhIHNvdW5kLlxuICAgKiBAcGFyYW0gc3JjIEEgcGF0aCB0byB0aGUgc291bmQgZmlsZSByZWxhdGl2ZSB0byB0aGUgc2NlbmUgZGlyZWN0b3J5XG4gICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucyBzaHVjaCBhcyBgdm9sdW1lYCwgYW5kIGBsb29wYFxuICAgKi9cbiAgcGxheVNvdW5kKHNyYzogc3RyaW5nLCBvcHRpb25zPzogeyB2b2x1bWU/OiBudW1iZXI7IGxvb3A/OiBib29sZWFuIH0pOiBQcm9taXNlPHZvaWQ+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlcklkZW50aXR5IHtcbiAgZ2V0VXNlclB1YmxpY0tleSgpOiBQcm9taXNlPHN0cmluZz5cbn1cbiJdfQ==