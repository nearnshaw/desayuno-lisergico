import { Vector3Component, Quaternion } from './interfaces';
export declare type PointerEvent = {
    /** Origin of the ray */
    from: Vector3Component;
    /** Direction vector of the ray (normalized) */
    direction: Vector3Component;
    /** Length of the ray */
    length: number;
    /** ID of the pointer that triggered the event */
    pointerId: number;
};
export interface IEvents {
    /**
     * `positionChanged` is triggered when the position of the camera changes
     * This event is throttled to 10 times per second.
     */
    positionChanged: {
        /** Position relative to the base parcel of the scene */
        position: Vector3Component;
        /** Camera position, this is a absolute world position */
        cameraPosition: Vector3Component;
        /** Eye height, in meters. */
        playerHeight: number;
    };
    /**
     * `rotationChanged` is triggered when the rotation of the camera changes.
     * This event is throttled to 10 times per second.
     */
    rotationChanged: {
        /** {X,Y,Z} Degree vector. Same as entities */
        rotation: Vector3Component;
        /** Rotation quaternion, useful in some scenarios. */
        quaternion: Quaternion;
    };
    /**
     * `setAttributes` is triggered after the system receives new properties.
     */
    setAttributes: {
        [key: string]: any;
    };
    /**
     * `click` is triggered when a user points and the ray (from mouse or controller) hits the entity.
     * Notice: Only entities with ID will be listening for click events.
     */
    click: {
        /** ID of the entitiy of the event */
        elementId: string;
        /** ID of the pointer that triggered the event */
        pointerId: number;
    };
    /**
     * `pointerUp` is triggered when the user releases an input pointer.
     * It could be a VR controller, a touch screen or the mouse.
     */
    pointerUp: PointerEvent;
    /**
     * `pointerUp` is triggered when the user press an input pointer.
     * It could be a VR controller, a touch screen or the mouse.
     */
    pointerDown: PointerEvent;
}
export declare type IEventNames = keyof IEvents;
export declare type RPCEvent<K extends IEventNames, D = any> = {
    event: K;
    data: D;
};
export declare function createEvent<T extends IEventNames>(event: T, data: IEvents[T]): RPCEvent<T, IEvents[T]>;
