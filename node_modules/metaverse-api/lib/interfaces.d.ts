export { IEntity } from './internal/applyPatch';
export interface ISimplifiedNode {
    tag: string;
    children: ISimplifiedNode[];
    attrs: {
        [name: string]: string | number[] | object | boolean | number;
    };
}
export interface Identity {
    getUserPublicKey(): Promise<string>;
}
export declare type LandDataVersion0 = {
    version: 0;
    name: string;
    description: string;
    ipns: string;
};
export declare type LandData = LandDataVersion0;
export declare const BillboardModes: {
    BILLBOARDMODE_NONE: number;
    BILLBOARDMODE_X: number;
    BILLBOARDMODE_Y: number;
    BILLBOARDMODE_Z: number;
    BILLBOARDMODE_ALL: number;
};
export declare type IBillboardModes = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
export interface ILand {
    x: number;
    y: number;
    hash: string;
    owner: string;
    landData: LandData;
    scene?: any;
    baseUrl: string;
    html?: string;
    district?: string;
    type?: 'road' | 'land' | 'plaza';
}
export interface SoundOptions {
    volume: number;
    loop: boolean;
}
/**
 * This data type defines a three component vector. It is used for scaling, positioning and rotations
 */
export declare type Vector3Component = {
    x: number;
    y: number;
    z: number;
};
export declare type Quaternion = {
    x: number;
    y: number;
    z: number;
    w: number;
};
/**
 * This data type defines a two component vector.
 */
export declare type Vector2Component = {
    x: number;
    y: number;
};
export declare type SoundComponent = {
    distanceModel?: 'linear' | 'inverse' | 'exponential';
    loop?: boolean;
    src: string;
    volume?: number;
    rolloffFactor?: number;
    playing?: boolean;
};
export declare type TransitionValue = {
    duration: number;
    timing?: TimingFunction;
    delay?: number;
};
export declare type TimingFunction = 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'quadratic-in' | 'quadratic-out' | 'quadratic-inout' | 'cubic-in' | 'cubic-out' | 'cubic-inout' | 'quartic-in' | 'quartic-out' | 'quartic-inout' | 'quintic-in' | 'quintic-out' | 'quintic-inout' | 'sin-in' | 'sin-out' | 'sin-inout' | 'exponential-in' | 'exponential-out' | 'exponential-inout' | 'bounce-in' | 'bounce-out' | 'bounce-inout' | 'elastic-in' | 'elastic-out' | 'elastic-inout' | 'circular-in' | 'circular-out' | 'circular-inout' | 'back-in' | 'back-out' | 'back-inout';
export declare type TransitionComponent = {
    position?: TransitionValue;
    rotation?: TransitionValue;
    scale?: TransitionValue;
    color?: TransitionValue;
};
export declare type SkeletalAnimationValue = {
    /**
     * Name or index of the animation in the model
     */
    clip: string | number;
    /**
     * Does the animation loop?, default: true
     */
    loop?: boolean;
    /**
     * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1
     */
    weight?: number;
    /**
     * Is the animation playing? default: true
     */
    playing?: boolean;
};
export declare type SkeletalAnimationComponent = SkeletalAnimationValue[];
export declare namespace Constants {
    const ReplaceWholeTreeException = "ReplaceWholeTreeException";
}
