import { IDiff } from './types';
import { ISimplifiedNode } from '..';
declare type IEntity<T extends ISimplifiedNode = any> = {
    /**
     * Receives a dictionary of attributes and values.
     * It initializes and updates the components.
     */
    setAttributes(attrs: {
        [attrName: string]: any;
    }): void;
    /**
     * Removes an attribute, if a component is attached to the attribute, it also tear down the component.
     */
    removeAttribute(attributeName: string): void;
    /**
     * Removes the entity from it's parent and also cleans up and
     * releases all the resources recursively
     */
    removeFromParent(): void;
    /**
     * Returns the list of children entities
     */
    childEntities(): IEntity[];
    /**
     * Appends an entity to this entity.
     * If the entity has another parent, it first safely removes it from its parent.
     */
    add(entity: T): void;
    /**
     * Returns the nth-child entity
     */
    getChildByIndex(index: number): T | null;
    /**
     * Replaces this entity by the new one.
     * The entity that is removed is released and cannot be reattached to the entity tree.
     */
    replaceBy(entity: T): void;
    /**
     * Finds an entity in this entities children and inserts the first argument before the second one (reference)
     */
    insertBefore(newItem: T, ref: T): void;
    /**
     * Finds an entity in this entities children and inserts the first argument after the second one (reference)
     */
    insertAfter(newItem: T, ref: T): void;
};
declare function applyPatch(tree: IEntity, diffs: IDiff[], createEntity: (node: ISimplifiedNode) => IEntity): boolean;
export { IEntity, applyPatch };
