import { ScriptableScene } from '../ScriptableScene';
import { ISimplifiedNode } from '../interfaces';
export declare type ComponentChild = JSX.Element;
export declare type ComponentChildren = ComponentChild[];
export declare type ComponentFactory<P> = ComponentConstructor<P> | FunctionalComponent<P>;
export declare type RenderableProps<P> = Readonly<P> & Readonly<{
    children?: ComponentChildren;
}>;
export interface FunctionalComponent<Props = {}> {
    (props: RenderableProps<Props>, context?: any): ISimplifiedNode | null;
}
export interface ComponentConstructor<Props = {}, State = {}> {
    new (props: Props, context?: any): ScriptableScene<Props, State>;
}
/**
 * JSX/hyperscript reviver.
 * @see http://jasonformat.com/wtf-is-jsx
 *
 * Creates a ISimplifiedNode (virtual entity). A tree of ISimplifiedNode can be used as a lightweight representation
 * of the structure of a entity tree. This structure can be realized by recursively comparing it against
 * the current _actual_ entity structure, and applying only the differences.
 *
 * `createElement()` accepts an element name, a list of attributes/props,
 * and optionally children to append to the element.
 *
 * @example The following entity tree
 *
 * `<box position={{x: 1, y: 2, z: 3}} />`
 *
 * can be constructed using this function as:
 *
 * `createElement('box', { position: {x: 1, y: 2, z: 3} });`
 *
 * @param {string} nodeName	An entity name. Ex: `scene`, `box`, `gltf-model`, etc.
 * @param {Object} attributes	Any attributes/props to set on the created entity.
 * @param rest Additional arguments are taken to be children to append. Can be infinitely nested Arrays.
 *
 * @public
 */
export declare function createElement<P>(node: ComponentFactory<P>, params: JSX.BaseEntity & P | null, ...children: (ComponentChild | ComponentChildren)[]): ISimplifiedNode;
export declare function createElement<K extends keyof JSX.IntrinsicElements>(node: K, params: JSX.IntrinsicElements[K], ...children: (ComponentChild | ComponentChildren)[]): ISimplifiedNode;
export declare function createElement(node: string, params: Record<string, any> | null, ...children: (ComponentChild | ComponentChildren)[]): ISimplifiedNode;
