"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stack = [];
function createElement(nodeName, attributes) {
    let children = [];
    let lastSimple = false;
    let child;
    let simple = false;
    let i;
    let nodeType;
    // tslint:disable-next-line:space-within-parens
    for (i = arguments.length; i-- > 2;) {
        if (arguments[i] && typeof arguments[i] !== 'string')
            stack.push(arguments[i]);
    }
    if (attributes && attributes.children != null) {
        if (!stack.length)
            stack.push(attributes.children);
        delete attributes.children;
    }
    while (stack.length) {
        // tslint:disable-next-line:no-conditional-assignment
        if ((child = stack.pop()) && child.pop !== undefined) {
            // tslint:disable-next-line:space-within-parens
            for (i = child.length; i--;)
                stack.push(child[i]);
        }
        else {
            if (typeof child === 'boolean')
                child = null;
            nodeType = typeof nodeName;
            // tslint:disable-next-line:no-conditional-assignment
            if ((simple = nodeType !== 'function')) {
                if (child == null)
                    child = null;
                else if (typeof child !== 'string')
                    simple = false;
            }
            if (simple && lastSimple) {
                children[children.length - 1] += child;
            }
            else if (child) {
                children.push(child);
            }
            lastSimple = simple;
        }
    }
    return {
        tag: nodeName,
        attrs: attributes || {},
        children: children || []
    };
}
exports.createElement = createElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlRWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9jcmVhdGVFbGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsTUFBTSxLQUFLLEdBQVUsRUFBRSxDQUFBO0FBMER2Qix1QkFBOEIsUUFBMkIsRUFBRSxVQUFlO0lBQ3hFLElBQUksUUFBUSxHQUFzQixFQUFFLENBQUE7SUFDcEMsSUFBSSxVQUFVLEdBQVksS0FBSyxDQUFBO0lBQy9CLElBQUksS0FBSyxDQUFBO0lBQ1QsSUFBSSxNQUFNLEdBQVksS0FBSyxDQUFBO0lBQzNCLElBQUksQ0FBQyxDQUFBO0lBQ0wsSUFBSSxRQUFnQixDQUFBO0lBRXBCLCtDQUErQztJQUMvQyxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBSTtRQUNwQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1lBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUMvRTtJQUNELElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO1FBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2xELE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQTtLQUMzQjtJQUNELE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUNuQixxREFBcUQ7UUFDckQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUNwRCwrQ0FBK0M7WUFDL0MsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7Z0JBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNuRDthQUFNO1lBQ0wsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTO2dCQUFFLEtBQUssR0FBRyxJQUFJLENBQUE7WUFFNUMsUUFBUSxHQUFHLE9BQU8sUUFBUSxDQUFBO1lBRTFCLHFEQUFxRDtZQUNyRCxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsS0FBSyxVQUFVLENBQUMsRUFBRTtnQkFDdEMsSUFBSSxLQUFLLElBQUksSUFBSTtvQkFBRSxLQUFLLEdBQUcsSUFBSSxDQUFBO3FCQUMxQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7b0JBQUUsTUFBTSxHQUFHLEtBQUssQ0FBQTthQUNuRDtZQUVELElBQUksTUFBTSxJQUFJLFVBQVUsRUFBRTtnQkFDeEIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFBO2FBQ3ZDO2lCQUFNLElBQUksS0FBSyxFQUFFO2dCQUNoQixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO2FBQ3JCO1lBRUQsVUFBVSxHQUFHLE1BQU0sQ0FBQTtTQUNwQjtLQUNGO0lBRUQsT0FBTztRQUNMLEdBQUcsRUFBRSxRQUFRO1FBQ2IsS0FBSyxFQUFFLFVBQVUsSUFBSSxFQUFFO1FBQ3ZCLFFBQVEsRUFBRSxRQUFRLElBQUksRUFBRTtLQUN6QixDQUFBO0FBQ0gsQ0FBQztBQS9DRCxzQ0ErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY3JpcHRhYmxlU2NlbmUgfSBmcm9tICcuLi9TY3JpcHRhYmxlU2NlbmUnXG5pbXBvcnQgeyBJU2ltcGxpZmllZE5vZGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzJ1xuXG5jb25zdCBzdGFjazogYW55W10gPSBbXVxuXG5leHBvcnQgdHlwZSBDb21wb25lbnRDaGlsZCA9IEpTWC5FbGVtZW50XG5leHBvcnQgdHlwZSBDb21wb25lbnRDaGlsZHJlbiA9IENvbXBvbmVudENoaWxkW11cblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50RmFjdG9yeTxQPiA9IENvbXBvbmVudENvbnN0cnVjdG9yPFA+IHwgRnVuY3Rpb25hbENvbXBvbmVudDxQPlxuXG5leHBvcnQgdHlwZSBSZW5kZXJhYmxlUHJvcHM8UD4gPSBSZWFkb25seTxQPiAmIFJlYWRvbmx5PHsgY2hpbGRyZW4/OiBDb21wb25lbnRDaGlsZHJlbiB9PlxuXG5leHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uYWxDb21wb25lbnQ8UHJvcHMgPSB7fT4ge1xuICAocHJvcHM6IFJlbmRlcmFibGVQcm9wczxQcm9wcz4sIGNvbnRleHQ/OiBhbnkpOiBJU2ltcGxpZmllZE5vZGUgfCBudWxsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50Q29uc3RydWN0b3I8UHJvcHMgPSB7fSwgU3RhdGUgPSB7fT4ge1xuICBuZXcgKHByb3BzOiBQcm9wcywgY29udGV4dD86IGFueSk6IFNjcmlwdGFibGVTY2VuZTxQcm9wcywgU3RhdGU+XG59XG5cbi8qKlxuICogSlNYL2h5cGVyc2NyaXB0IHJldml2ZXIuXG4gKiBAc2VlIGh0dHA6Ly9qYXNvbmZvcm1hdC5jb20vd3RmLWlzLWpzeFxuICpcbiAqIENyZWF0ZXMgYSBJU2ltcGxpZmllZE5vZGUgKHZpcnR1YWwgZW50aXR5KS4gQSB0cmVlIG9mIElTaW1wbGlmaWVkTm9kZSBjYW4gYmUgdXNlZCBhcyBhIGxpZ2h0d2VpZ2h0IHJlcHJlc2VudGF0aW9uXG4gKiBvZiB0aGUgc3RydWN0dXJlIG9mIGEgZW50aXR5IHRyZWUuIFRoaXMgc3RydWN0dXJlIGNhbiBiZSByZWFsaXplZCBieSByZWN1cnNpdmVseSBjb21wYXJpbmcgaXQgYWdhaW5zdFxuICogdGhlIGN1cnJlbnQgX2FjdHVhbF8gZW50aXR5IHN0cnVjdHVyZSwgYW5kIGFwcGx5aW5nIG9ubHkgdGhlIGRpZmZlcmVuY2VzLlxuICpcbiAqIGBjcmVhdGVFbGVtZW50KClgIGFjY2VwdHMgYW4gZWxlbWVudCBuYW1lLCBhIGxpc3Qgb2YgYXR0cmlidXRlcy9wcm9wcyxcbiAqIGFuZCBvcHRpb25hbGx5IGNoaWxkcmVuIHRvIGFwcGVuZCB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBAZXhhbXBsZSBUaGUgZm9sbG93aW5nIGVudGl0eSB0cmVlXG4gKlxuICogYDxib3ggcG9zaXRpb249e3t4OiAxLCB5OiAyLCB6OiAzfX0gLz5gXG4gKlxuICogY2FuIGJlIGNvbnN0cnVjdGVkIHVzaW5nIHRoaXMgZnVuY3Rpb24gYXM6XG4gKlxuICogYGNyZWF0ZUVsZW1lbnQoJ2JveCcsIHsgcG9zaXRpb246IHt4OiAxLCB5OiAyLCB6OiAzfSB9KTtgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5vZGVOYW1lXHRBbiBlbnRpdHkgbmFtZS4gRXg6IGBzY2VuZWAsIGBib3hgLCBgZ2x0Zi1tb2RlbGAsIGV0Yy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXHRBbnkgYXR0cmlidXRlcy9wcm9wcyB0byBzZXQgb24gdGhlIGNyZWF0ZWQgZW50aXR5LlxuICogQHBhcmFtIHJlc3QgQWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHRha2VuIHRvIGJlIGNoaWxkcmVuIHRvIGFwcGVuZC4gQ2FuIGJlIGluZmluaXRlbHkgbmVzdGVkIEFycmF5cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQ8UD4oXG4gIG5vZGU6IENvbXBvbmVudEZhY3Rvcnk8UD4sXG4gIHBhcmFtczogSlNYLkJhc2VFbnRpdHkgJiBQIHwgbnVsbCxcbiAgLi4uY2hpbGRyZW46IChDb21wb25lbnRDaGlsZCB8IENvbXBvbmVudENoaWxkcmVuKVtdXG4pOiBJU2ltcGxpZmllZE5vZGVcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50PEsgZXh0ZW5kcyBrZXlvZiBKU1guSW50cmluc2ljRWxlbWVudHM+KFxuICBub2RlOiBLLFxuICBwYXJhbXM6IEpTWC5JbnRyaW5zaWNFbGVtZW50c1tLXSxcbiAgLi4uY2hpbGRyZW46IChDb21wb25lbnRDaGlsZCB8IENvbXBvbmVudENoaWxkcmVuKVtdXG4pOiBJU2ltcGxpZmllZE5vZGVcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KFxuICBub2RlOiBzdHJpbmcsXG4gIHBhcmFtczogUmVjb3JkPHN0cmluZywgYW55PiB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiAoQ29tcG9uZW50Q2hpbGQgfCBDb21wb25lbnRDaGlsZHJlbilbXVxuKTogSVNpbXBsaWZpZWROb2RlXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudChub2RlTmFtZTogc3RyaW5nIHwgRnVuY3Rpb24sIGF0dHJpYnV0ZXM6IGFueSkge1xuICBsZXQgY2hpbGRyZW46IElTaW1wbGlmaWVkTm9kZVtdID0gW11cbiAgbGV0IGxhc3RTaW1wbGU6IGJvb2xlYW4gPSBmYWxzZVxuICBsZXQgY2hpbGRcbiAgbGV0IHNpbXBsZTogYm9vbGVhbiA9IGZhbHNlXG4gIGxldCBpXG4gIGxldCBub2RlVHlwZTogc3RyaW5nXG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnNwYWNlLXdpdGhpbi1wYXJlbnNcbiAgZm9yIChpID0gYXJndW1lbnRzLmxlbmd0aDsgaS0tID4gMjsgKSB7XG4gICAgaWYgKGFyZ3VtZW50c1tpXSAmJiB0eXBlb2YgYXJndW1lbnRzW2ldICE9PSAnc3RyaW5nJykgc3RhY2sucHVzaChhcmd1bWVudHNbaV0pXG4gIH1cbiAgaWYgKGF0dHJpYnV0ZXMgJiYgYXR0cmlidXRlcy5jaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgaWYgKCFzdGFjay5sZW5ndGgpIHN0YWNrLnB1c2goYXR0cmlidXRlcy5jaGlsZHJlbilcbiAgICBkZWxldGUgYXR0cmlidXRlcy5jaGlsZHJlblxuICB9XG4gIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uZGl0aW9uYWwtYXNzaWdubWVudFxuICAgIGlmICgoY2hpbGQgPSBzdGFjay5wb3AoKSkgJiYgY2hpbGQucG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzcGFjZS13aXRoaW4tcGFyZW5zXG4gICAgICBmb3IgKGkgPSBjaGlsZC5sZW5ndGg7IGktLTsgKSBzdGFjay5wdXNoKGNoaWxkW2ldKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnYm9vbGVhbicpIGNoaWxkID0gbnVsbFxuXG4gICAgICBub2RlVHlwZSA9IHR5cGVvZiBub2RlTmFtZVxuXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uZGl0aW9uYWwtYXNzaWdubWVudFxuICAgICAgaWYgKChzaW1wbGUgPSBub2RlVHlwZSAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgaWYgKGNoaWxkID09IG51bGwpIGNoaWxkID0gbnVsbFxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGQgIT09ICdzdHJpbmcnKSBzaW1wbGUgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZiAoc2ltcGxlICYmIGxhc3RTaW1wbGUpIHtcbiAgICAgICAgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gKz0gY2hpbGRcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGQpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICAgIH1cblxuICAgICAgbGFzdFNpbXBsZSA9IHNpbXBsZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGFnOiBub2RlTmFtZSxcbiAgICBhdHRyczogYXR0cmlidXRlcyB8fCB7fSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4gfHwgW11cbiAgfVxufVxuIl19