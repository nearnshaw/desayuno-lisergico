import { IDiff } from './types';
import { ISimplifiedNode } from '../interfaces';
import { Diff } from './Diff';
export declare class DiffDOM {
    options: {};
    tracker: Diff[];
    t1Orig: ISimplifiedNode;
    t2Orig: ISimplifiedNode;
    debug: boolean;
    diffcap: number;
    maxDepth: number | false;
    maxChildCount: number | false;
    maxChildCountDiffCount: number;
    filterOuterDiff: any;
    compress: boolean;
    constructor(options?: {});
    diff(t1Node: ISimplifiedNode, t2Node: ISimplifiedNode): Diff[];
    findDiffs(t1: ISimplifiedNode, t2: ISimplifiedNode): Diff[];
    findNextDiff(t1: ISimplifiedNode, t2: ISimplifiedNode, route: number[]): Diff[];
    findOuterDiff(t1: ISimplifiedNode, t2: ISimplifiedNode, route: number[]): Diff[];
    findInnerDiff(t1: ISimplifiedNode, t2: ISimplifiedNode, route: number[]): Diff[];
    attemptGroupRelocation(t1: ISimplifiedNode, t2: ISimplifiedNode, subtrees: any, route: number[]): Diff[];
    /** Patches a virtual tree using a list of diffs */
    applyVirtual(tree: ISimplifiedNode, diffs: IDiff[]): boolean;
    /** Gets a node in the virtual tree by a route */
    getFromVirtualRoute(tree: ISimplifiedNode, route: number[]): {
        node: ISimplifiedNode;
        parentNode: ISimplifiedNode;
        nodeIndex: number;
    };
    /** Patches a virtual tree using a diff */
    applyVirtualDiff(tree: ISimplifiedNode, diff: IDiff): any;
}
