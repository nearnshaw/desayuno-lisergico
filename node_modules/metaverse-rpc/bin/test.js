#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const traceur = require('traceur');
traceur.require.makeDefault(function (filename) {
    return filename.indexOf('node_modules') === -1;
}, {
    asyncFunctions: true,
    asyncGenerators: true
});
const path_1 = require("path");
const http = require("http");
const express = require("express");
const titere = require("titere");
const fs = require("fs");
const WS = require('../test/server/_testWebSocketServer');
const keepOpen = process.argv.some($ => $ === '--keep-open');
const app = express();
const port = process.env.PORT || 3000;
const server = http.createServer(app);
WS.initializeWebSocketTester(server);
app.get('/', function (req, res) {
    res.sendFile(path_1.resolve(__dirname, '../test/index.html'));
});
console.log(path_1.resolve(__dirname, '../node_modules'));
app.use('/test', express.static(path_1.resolve(__dirname, '../test')));
app.use('/node_modules', express.static(path_1.resolve(__dirname, '../node_modules')));
server.listen(port, function (error) {
    if (error) {
        console.error(error);
        process.exit(1);
    }
    else {
        console.info('==> ðŸŒŽ  Listening on port %s. Open up http://localhost:%s/ in your browser.', port, port);
        const options = {
            file: `http://localhost:${port}`,
            visible: keepOpen,
            height: 600,
            width: 800,
            timeout: 5 * 60 * 1000,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        };
        titere
            .run(options)
            .then(result => {
            if (result.coverage) {
                fs.writeFileSync('test/out/out.json', JSON.stringify(result.coverage));
            }
            else {
                console.error('Coverage data not found');
                process.exit(1);
            }
            if (!keepOpen)
                process.exit(result.result.stats.failures);
        })
            .catch((err) => {
            console.error(err.message || JSON.stringify(err));
            console.dir(err);
            if (!keepOpen)
                process.exit(1);
        });
    }
});
server.on('error', e => console.log(e));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBR2xDLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUN6QixVQUFTLFFBQWdCO0lBRXZCLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUNoRCxDQUFDLEVBQ0Q7SUFDRSxjQUFjLEVBQUUsSUFBSTtJQUNwQixlQUFlLEVBQUUsSUFBSTtDQUN0QixDQUNGLENBQUE7QUFFRCwrQkFBOEI7QUFDOUIsNkJBQTRCO0FBQzVCLG1DQUFrQztBQUNsQyxpQ0FBaUM7QUFDakMseUJBQXlCO0FBRXpCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFBO0FBRXpELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLGFBQWEsQ0FBQyxDQUFBO0FBQzVELE1BQU0sR0FBRyxHQUFHLE9BQU8sRUFBRSxDQUFBO0FBQ3JCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQTtBQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBRXJDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUdwQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFTLEdBQUcsRUFBRSxHQUFHO0lBQzVCLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUE7QUFDeEQsQ0FBQyxDQUFDLENBQUE7QUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQU8sQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFBO0FBRWxELEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFPLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFBO0FBRS9FLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFVBQVMsS0FBVTtJQUNyQyxJQUFJLEtBQUssRUFBRTtRQUNULE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNoQjtTQUFNO1FBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyw2RUFBNkUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFFdkcsTUFBTSxPQUFPLEdBQW1CO1lBQzlCLElBQUksRUFBRSxvQkFBb0IsSUFBSSxFQUFFO1lBQ2hDLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLE1BQU0sRUFBRSxHQUFHO1lBQ1gsS0FBSyxFQUFFLEdBQUc7WUFDVixPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJO1lBQ3RCLElBQUksRUFBRSxDQUFDLGNBQWMsRUFBRSwwQkFBMEIsQ0FBQztTQUNuRCxDQUFBO1FBRUQsTUFBTTthQUNILEdBQUcsQ0FBQyxPQUFPLENBQUM7YUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDYixJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0JBQ25CLEVBQUUsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTthQUN2RTtpQkFBTTtnQkFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7Z0JBQ3hDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDaEI7WUFDRCxJQUFJLENBQUMsUUFBUTtnQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzNELENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEdBQVUsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNoQixJQUFJLENBQUMsUUFBUTtnQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2hDLENBQUMsQ0FBQyxDQUFBO0tBQ0w7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQUVGLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG4vLyBXZSB1c2UgZXNuZXh0IGluIGRjbC1zZGssIHdlYnBhY2sgYW5kIHJvbGx1cCBoYW5kbGUgaXQgbmF0aXZlbHkgYnV0IG5vdCBOb2RlLmpzXG5cbmNvbnN0IHRyYWNldXIgPSByZXF1aXJlKCd0cmFjZXVyJylcblxuLy8gcmVwbGFjZSBub2RlLmpzIHJlcXVpcmUgYnkgdHJhY2V1cidzXG50cmFjZXVyLnJlcXVpcmUubWFrZURlZmF1bHQoXG4gIGZ1bmN0aW9uKGZpbGVuYW1lOiBzdHJpbmcpIHtcbiAgICAvLyBkb24ndCB0cmFuc3BpbGUgb3VyIGRlcGVuZGVuY2llcywganVzdCBvdXIgYXBwXG4gICAgcmV0dXJuIGZpbGVuYW1lLmluZGV4T2YoJ25vZGVfbW9kdWxlcycpID09PSAtMVxuICB9LFxuICB7XG4gICAgYXN5bmNGdW5jdGlvbnM6IHRydWUsXG4gICAgYXN5bmNHZW5lcmF0b3JzOiB0cnVlXG4gIH1cbilcblxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgdGl0ZXJlID0gcmVxdWlyZSgndGl0ZXJlJylcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJylcblxuY29uc3QgV1MgPSByZXF1aXJlKCcuLi90ZXN0L3NlcnZlci9fdGVzdFdlYlNvY2tldFNlcnZlcicpXG5cbmNvbnN0IGtlZXBPcGVuID0gcHJvY2Vzcy5hcmd2LnNvbWUoJCA9PiAkID09PSAnLS1rZWVwLW9wZW4nKVxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwXG5jb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApXG5cbldTLmluaXRpYWxpemVXZWJTb2NrZXRUZXN0ZXIoc2VydmVyKVxuXG4vLyBzZXJ2ZSBidWlsZC5odG1sXG5hcHAuZ2V0KCcvJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgcmVzLnNlbmRGaWxlKHJlc29sdmUoX19kaXJuYW1lLCAnLi4vdGVzdC9pbmRleC5odG1sJykpXG59KVxuXG5jb25zb2xlLmxvZyhyZXNvbHZlKF9fZGlybmFtZSwgJy4uL25vZGVfbW9kdWxlcycpKVxuXG5hcHAudXNlKCcvdGVzdCcsIGV4cHJlc3Muc3RhdGljKHJlc29sdmUoX19kaXJuYW1lLCAnLi4vdGVzdCcpKSlcbmFwcC51c2UoJy9ub2RlX21vZHVsZXMnLCBleHByZXNzLnN0YXRpYyhyZXNvbHZlKF9fZGlybmFtZSwgJy4uL25vZGVfbW9kdWxlcycpKSlcblxuc2VydmVyLmxpc3Rlbihwb3J0LCBmdW5jdGlvbihlcnJvcjogYW55KSB7XG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgcHJvY2Vzcy5leGl0KDEpXG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5pbmZvKCc9PT4g8J+MjiAgTGlzdGVuaW5nIG9uIHBvcnQgJXMuIE9wZW4gdXAgaHR0cDovL2xvY2FsaG9zdDolcy8gaW4geW91ciBicm93c2VyLicsIHBvcnQsIHBvcnQpXG5cbiAgICBjb25zdCBvcHRpb25zOiB0aXRlcmUuT3B0aW9ucyA9IHtcbiAgICAgIGZpbGU6IGBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH1gLFxuICAgICAgdmlzaWJsZToga2VlcE9wZW4sXG4gICAgICBoZWlnaHQ6IDYwMCxcbiAgICAgIHdpZHRoOiA4MDAsXG4gICAgICB0aW1lb3V0OiA1ICogNjAgKiAxMDAwLFxuICAgICAgYXJnczogWyctLW5vLXNhbmRib3gnLCAnLS1kaXNhYmxlLXNldHVpZC1zYW5kYm94J11cbiAgICB9XG5cbiAgICB0aXRlcmVcbiAgICAgIC5ydW4ob3B0aW9ucylcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQuY292ZXJhZ2UpIHtcbiAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKCd0ZXN0L291dC9vdXQuanNvbicsIEpTT04uc3RyaW5naWZ5KHJlc3VsdC5jb3ZlcmFnZSkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignQ292ZXJhZ2UgZGF0YSBub3QgZm91bmQnKVxuICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKVxuICAgICAgICB9XG4gICAgICAgIGlmICgha2VlcE9wZW4pIHByb2Nlc3MuZXhpdChyZXN1bHQucmVzdWx0LnN0YXRzLmZhaWx1cmVzKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlIHx8IEpTT04uc3RyaW5naWZ5KGVycikpXG4gICAgICAgIGNvbnNvbGUuZGlyKGVycilcbiAgICAgICAgaWYgKCFrZWVwT3BlbikgcHJvY2Vzcy5leGl0KDEpXG4gICAgICB9KVxuICB9XG59KVxuXG5zZXJ2ZXIub24oJ2Vycm9yJywgZSA9PiBjb25zb2xlLmxvZyhlKSlcbiJdfQ==