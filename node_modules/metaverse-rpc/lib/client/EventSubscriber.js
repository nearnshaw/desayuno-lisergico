import { EventDispatcher, EventDispatcherBinding } from '../common/core/EventDispatcher';
export class EventSubscriber extends EventDispatcher {
    constructor(component) {
        super();
        this.component = component;
        component.onSubscribedEvent((data) => {
            super.emit(data.event, data);
        });
    }
    on(event, handler) {
        if (this.getEventBindings(event).length === 0) {
            this.component.subscribe(event).catch(e => this.emit('error', e));
        }
        return super.on.apply(this, arguments);
    }
    off(event) {
        let theEventToValidate = null;
        const offResult = super.off.apply(this, arguments);
        if (typeof event === 'string') {
            theEventToValidate = event;
        }
        else if (event instanceof EventDispatcherBinding) {
            event = event.event;
        }
        if (theEventToValidate !== null) {
            if (this.getEventBindings(theEventToValidate).length === 0) {
                this.component.unsubscribe(theEventToValidate).catch(e => this.emit('error', e));
            }
        }
        return offResult;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdWJzY3JpYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC9FdmVudFN1YnNjcmliZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBR3hGLE1BQU0sc0JBQXVCLFNBQVEsZUFBZTtJQUNsRCxZQUFvQixTQUEyQjtRQUM3QyxLQUFLLEVBQUUsQ0FBQTtRQURXLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBRzdDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ3hDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFTRCxFQUFFLENBQUMsS0FBYSxFQUFFLE9BQVk7UUFDNUIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ2xFO1FBQ0QsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQU9ELEdBQUcsQ0FBQyxLQUFpRDtRQUNuRCxJQUFJLGtCQUFrQixHQUFrQixJQUFJLENBQUE7UUFDNUMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBRWxELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLGtCQUFrQixHQUFHLEtBQUssQ0FBQTtTQUMzQjthQUFNLElBQUksS0FBSyxZQUFZLHNCQUFzQixFQUFFO1lBQ2xELEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFBO1NBQ3BCO1FBRUQsSUFBSSxrQkFBa0IsS0FBSyxJQUFJLEVBQUU7WUFDL0IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUkxRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDakY7U0FDRjtRQUVELE9BQU8sU0FBUyxDQUFBO0lBQ2xCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciwgRXZlbnREaXNwYXRjaGVyQmluZGluZyB9IGZyb20gJy4uL2NvbW1vbi9jb3JlL0V2ZW50RGlzcGF0Y2hlcidcbmltcG9ydCB7IElTdWJzY3JpYmFibGVBUEkgfSBmcm9tICcuLi9ob3N0L0FQSSdcblxuZXhwb3J0IGNsYXNzIEV2ZW50U3Vic2NyaWJlciBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50OiBJU3Vic2NyaWJhYmxlQVBJKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgY29tcG9uZW50Lm9uU3Vic2NyaWJlZEV2ZW50KChkYXRhOiBhbnkpID0+IHtcbiAgICAgIHN1cGVyLmVtaXQoZGF0YS5ldmVudCwgZGF0YSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBsaXN0ZW5lciBmb3IgYW4gc3BlY2lmaWMgZXZlbnQuXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICogQHBhcmFtIGhhbmRsZXIgQSBoYW5kbGVyIHdoaWNoIGJlIGNhbGxlZCBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHJlY2VpdmVkXG4gICAqL1xuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkLCBvbmNlPzogYm9vbGVhbik6IEV2ZW50RGlzcGF0Y2hlckJpbmRpbmdcbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSwgb25jZT86IGJvb2xlYW4pOiBFdmVudERpc3BhdGNoZXJCaW5kaW5nXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGhhbmRsZXI6IGFueSkge1xuICAgIGlmICh0aGlzLmdldEV2ZW50QmluZGluZ3MoZXZlbnQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5jb21wb25lbnQuc3Vic2NyaWJlKGV2ZW50KS5jYXRjaChlID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlKSlcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZm9yIGFuIHNwZWNpZmljIGV2ZW50XG4gICAqIEBwYXJhbSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICogQHBhcmFtIGJpbmRpbmcgQSByZWZlcmVuY2UgdG8gYSBiaW5kaW5nIHJldHVybmVkIGJ5IGEgcHJldmlvdXMgYGFkZEV2ZW50TGlzdGVuZXJgIGNhbGxcbiAgICovXG4gIG9mZihldmVudDogc3RyaW5nIHwgRXZlbnREaXNwYXRjaGVyQmluZGluZyB8IEZ1bmN0aW9uKSB7XG4gICAgbGV0IHRoZUV2ZW50VG9WYWxpZGF0ZTogc3RyaW5nIHwgbnVsbCA9IG51bGxcbiAgICBjb25zdCBvZmZSZXN1bHQgPSBzdXBlci5vZmYuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuXG4gICAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoZUV2ZW50VG9WYWxpZGF0ZSA9IGV2ZW50XG4gICAgfSBlbHNlIGlmIChldmVudCBpbnN0YW5jZW9mIEV2ZW50RGlzcGF0Y2hlckJpbmRpbmcpIHtcbiAgICAgIGV2ZW50ID0gZXZlbnQuZXZlbnRcbiAgICB9XG5cbiAgICBpZiAodGhlRXZlbnRUb1ZhbGlkYXRlICE9PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5nZXRFdmVudEJpbmRpbmdzKHRoZUV2ZW50VG9WYWxpZGF0ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSByZW1vdmluZyB0aGUgbGFzdCBldmVudCBsaXN0ZW5lciwgcmVtb3ZlIGl0IGFsc28gZnJvbSB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIHRoaXMgd2lsbCBrZWVwIGxpc3RlbmVycyB1bnJlbGF0ZWQgdG8gdGhlIGNvbXBvbmVudCBpbnRhY3RcblxuICAgICAgICB0aGlzLmNvbXBvbmVudC51bnN1YnNjcmliZSh0aGVFdmVudFRvVmFsaWRhdGUpLmNhdGNoKGUgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGUpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvZmZSZXN1bHRcbiAgfVxufVxuIl19