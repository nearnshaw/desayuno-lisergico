import { Client } from '../common/json-rpc/Client';
import { ILogOpts, ScriptingTransport } from '../common/json-rpc/types';
export interface Script {
    systemDidEnable?(): Promise<void> | void;
}
export declare type API = any;
export declare function inject(apiName?: string): <T extends Script>(target: T, propertyKey: keyof T) => void;
export declare function getInjectedAPIs<T extends Script>(instance: T): Map<keyof T, string>;
export declare class Script extends Client {
    private transport;
    static inject: typeof inject;
    loadedAPIs: {
        [key: string]: API;
    };
    protected started: boolean;
    constructor(transport: ScriptingTransport, opt?: ILogOpts);
    sendMessage(message: string): void;
    loadAPIs(apiName: string[]): Promise<{
        [key: string]: any;
    }>;
    protected didConnect(): void;
}
