import { Client } from '../common/json-rpc/Client';
import { getApi } from '../common/json-rpc/API';
import { isPromiseLike } from '../common/core/isPromiseLike';
const loadAPIsNotificationName = 'LoadComponents';
const hasSymbol = typeof Symbol === 'function' && Symbol.for;
const injectedAPISymbol = hasSymbol ? Symbol('injectedAPIs') : 0xfea0;
export function inject(apiName) {
    if (apiName !== undefined && !apiName) {
        throw new TypeError('API name cannot be null / empty');
    }
    return function (target, propertyKey) {
        if (typeof propertyKey === 'string') {
            getInjectedAPIs(target).set(propertyKey, apiName || propertyKey);
        }
        else
            throw new TypeError('Cannot inject APIs with non-string names');
    };
}
export function getInjectedAPIs(instance) {
    const instanceAny = instance;
    instanceAny[injectedAPISymbol] = instanceAny[injectedAPISymbol] || new Map();
    return instanceAny[injectedAPISymbol];
}
async function _injectAPIs(target) {
    const injectedMap = getInjectedAPIs(target);
    if (injectedMap.size === 0)
        return;
    await target.loadAPIs(Array.from(injectedMap.values()));
    injectedMap.forEach(function (apiName, property) {
        target[property] = target.loadedAPIs[apiName];
    });
}
export class Script extends Client {
    constructor(transport, opt) {
        super(opt);
        this.transport = transport;
        this.loadedAPIs = {};
        this.started = false;
        if (transport.onError) {
            transport.onError(e => {
                this.emit('error', e);
            });
        }
        if (transport.onClose) {
            transport.onClose(() => {
                this.emit('transportClosed');
            });
        }
        transport.onMessage(message => {
            this.processMessage(message);
        });
        if (transport.onConnect) {
            transport.onConnect(() => {
                this.didConnect();
            });
        }
        else {
            this.didConnect();
        }
    }
    sendMessage(message) {
        this.transport.sendMessage(message);
    }
    async loadAPIs(apiName) {
        const loadedKeys = Object.keys(this.loadedAPIs);
        const keysToRequest = apiName.filter(function ($) {
            return !loadedKeys.includes($);
        });
        if (keysToRequest.length) {
            await this.call(loadAPIsNotificationName, [keysToRequest]);
            keysToRequest.forEach(async (apiName) => {
                this.loadedAPIs[apiName] = getApi(this, apiName);
            });
        }
        return this.loadedAPIs;
    }
    didConnect() {
        const injection = _injectAPIs(this);
        super.didConnect();
        injection
            .then(() => {
            if (this.systemDidEnable && !this.started) {
                this.started = true;
                try {
                    const r = this.systemDidEnable();
                    if (r && isPromiseLike(r)) {
                        r.catch(e => this.emit('error', e));
                    }
                }
                catch (e) {
                    this.emit('error', e);
                }
            }
        })
            .catch(e => this.emit('error', e));
    }
}
Script.inject = inject;
//# sourceMappingURL=data:application/json;base64,