const eventSplitter = /\s+/g;
export class EventDispatcherBinding {
    constructor(id, cb, event, sharedList, object) {
        this.id = id;
        this.cb = cb;
        this.event = event;
        this.sharedList = sharedList;
        this.object = object;
        this.enabled = true;
    }
    off() {
        if (this.object) {
            this.cb && this.object.off(this);
            this.cb = null;
            this.object = null;
            if (this.sharedList) {
                delete this.sharedList;
            }
        }
    }
    enable() {
        if (this.sharedList) {
            for (let i = 0; i < this.sharedList.length; i++) {
                this.sharedList[i].enabled = true;
            }
        }
        else
            this.enabled = true;
    }
    disable() {
        if (this.sharedList) {
            for (let i = 0; i < this.sharedList.length; i++) {
                this.sharedList[i].enabled = false;
            }
        }
        else {
            this.enabled = false;
        }
    }
}
function turnOffCallback(f) {
    delete f.cb;
}
export class EventDispatcher {
    constructor() {
        this.edBindings = {};
        this.edBindCount = 0;
    }
    on(event, callback, once) {
        this.edBindCount++;
        let events = event.split(eventSplitter);
        let bindList = [];
        let latest = null;
        for (let evt of events) {
            let tmp = new EventDispatcherBinding(this.edBindCount, null, evt, bindList, this);
            bindList && bindList.push(tmp);
            if (once) {
                tmp.cb = function () {
                    callback.apply(this, arguments);
                    tmp.cb = null;
                }.bind(this);
            }
            else {
                tmp.cb = callback.bind(this);
            }
            this.edBindings[evt] = this.edBindings[evt] || [];
            this.edBindings[evt].push(tmp);
            latest = tmp;
        }
        return latest;
    }
    once(event, callback) {
        return this.on(event, callback, true);
    }
    off(arg0, arg1) {
        if (arguments.length === 0) {
            for (let i in this.edBindings) {
                for (let e in this.edBindings[i]) {
                    delete this.edBindings[i][e].cb;
                }
                this.edBindings[i].length = 0;
            }
        }
        else if (arg0 instanceof EventDispatcherBinding) {
            arg0.cb = null;
            arg0.sharedList && arg0.sharedList.length && arg0.sharedList.forEach(turnOffCallback);
        }
        else if (typeof arg0 === 'string') {
            if (typeof arg1 === 'function') {
                for (let i in this.edBindings[arg0]) {
                    if (this.edBindings[arg0][i].cb === arg1) {
                        this.edBindings[arg0][i].cb = null;
                    }
                }
            }
            else if (typeof arg0 === 'string') {
                this.edBindings[arg0] = [];
            }
        }
        else if (typeof arg0 === 'function') {
            for (let evt in this.edBindings) {
                for (let i in this.edBindings[evt]) {
                    if (this.edBindings[evt][i].cb === arg0) {
                        this.edBindings[evt][i].cb = null;
                    }
                }
            }
        }
    }
    emit(event) {
        if (event in this.edBindings) {
            if (arguments.length === 1) {
                for (let i = 0; i < this.edBindings[event].length; i++) {
                    let e = this.edBindings[event][i];
                    e && e.cb && e.enabled && e.cb();
                }
            }
            else if (arguments.length === 2) {
                for (let i = 0; i < this.edBindings[event].length; i++) {
                    let e = this.edBindings[event][i];
                    e && e.cb && e.enabled && e.cb(arguments[1]);
                }
            }
            else if (arguments.length === 3) {
                for (let i = 0; i < this.edBindings[event].length; i++) {
                    let e = this.edBindings[event][i];
                    e && e.cb && e.enabled && e.cb(arguments[1], arguments[2]);
                }
            }
            else if (arguments.length === 4) {
                for (let i = 0; i < this.edBindings[event].length; i++) {
                    let e = this.edBindings[event][i];
                    e && e.cb && e.enabled && e.cb(arguments[1], arguments[2], arguments[3]);
                }
            }
            else if (arguments.length === 5) {
                for (let i = 0; i < this.edBindings[event].length; i++) {
                    let e = this.edBindings[event][i];
                    e && e.cb && e.enabled && e.cb(arguments[1], arguments[2], arguments[3], arguments[4]);
                }
            }
            else if (arguments.length > 4) {
                let args = Array.prototype.slice.call(arguments, 1);
                for (let i = 0; i < this.edBindings[event].length; i++) {
                    let e = this.edBindings[event][i];
                    e && e.cb && e.enabled && e.cb.apply(this, args);
                }
            }
        }
        else if (event === 'error') {
            const firstArgument = arguments[1];
            let error = null;
            if (firstArgument instanceof Error) {
                error = firstArgument;
            }
            else {
                error = Object.assign(new Error('EventDispatcher: Unhandled "error" event'), { data: arguments });
            }
            console.error(error);
            console.trace(arguments);
            throw error;
        }
    }
    getEventBindings(event) {
        return (this.edBindings[event] || []).filter($ => $ && $.enabled);
    }
}
//# sourceMappingURL=data:application/json;base64,