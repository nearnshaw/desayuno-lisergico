/// <reference types="node" />
import { EventDispatcher } from '../core/EventDispatcher';
import * as JsonRpc2 from './types';
export declare abstract class Client extends EventDispatcher implements JsonRpc2.IClient {
    sendEncoding: 'JSON' | 'msgpack';
    private _responsePromiseMap;
    private _nextMessageId;
    private _consoleLog;
    private _requestQueue;
    private _connected;
    constructor(opts?: JsonRpc2.IClientOpts);
    abstract sendMessage(message: string | Buffer): void;
    processMessage(messageStr: string | (JsonRpc2.IResponse & JsonRpc2.INotification) | Buffer | Uint8Array | number[]): void;
    setLogging({ logConsole }?: JsonRpc2.ILogOpts): void;
    call(method: string): Promise<any>;
    call(method: string, params: string): never;
    call(method: string, params: number): never;
    call(method: string, params: boolean): never;
    call(method: string, params: null): never;
    call<T>(method: string, params: Iterable<T>): Promise<any>;
    call(method: string, params: {
        [key: string]: any;
    }): Promise<any>;
    notify(method: string): void;
    notify(method: string, params: string): never;
    notify(method: string, params: number): never;
    notify(method: string, params: boolean): never;
    notify(method: string, params: null): never;
    notify<T>(method: string, params: Iterable<T>): void;
    notify(method: string, params: {
        [key: string]: any;
    }): void;
    protected didConnect(): void;
    private _send;
    private _sendQueuedRequests;
    private _logMessage;
}
