export function WebSocketTransport(socket) {
    const queue = [];
    socket.addEventListener('open', function () {
        flush();
    });
    function flush() {
        if (socket.readyState === socket.OPEN) {
            queue.forEach($ => send($));
            queue.length = 0;
        }
    }
    function send(msg) {
        if (typeof msg === 'string') {
            socket.send(msg, { binary: false });
        }
        else if (msg instanceof Uint8Array || msg instanceof ArrayBuffer || msg instanceof SharedArrayBuffer) {
            ;
            socket.binaryType = 'arraybuffer';
            socket.send(msg, { binary: true });
        }
    }
    const api = {
        onConnect(handler) {
            if (socket.readyState === socket.OPEN) {
                handler();
            }
            else {
                socket.addEventListener('open', () => handler(), { once: true });
            }
        },
        onError(handler) {
            socket.addEventListener('error', (err) => handler(err.error));
        },
        onMessage(handler) {
            socket.addEventListener('message', (message) => {
                handler(message.data);
            });
        },
        sendMessage(message) {
            const toSend = message instanceof Uint8Array ? message.buffer : message;
            if (socket.readyState === socket.OPEN) {
                send(toSend);
            }
            else {
                queue.push(toSend);
            }
        },
        close() {
            socket.close();
        }
    };
    return api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViU29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi90cmFuc3BvcnRzL1dlYlNvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQ0EsTUFBTSw2QkFBNkIsTUFBa0I7SUFDbkQsTUFBTSxLQUFLLEdBQXVFLEVBQUUsQ0FBQTtJQUVwRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO1FBQzlCLEtBQUssRUFBRSxDQUFBO0lBQ1QsQ0FBQyxDQUFDLENBQUE7SUFFRjtRQUNFLElBQUksTUFBTSxDQUFDLFVBQVUsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ3JDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMzQixLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtTQUNqQjtJQUNILENBQUM7SUFFRCxjQUFjLEdBQW1FO1FBQy9FLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7U0FDcEM7YUFBTSxJQUFJLEdBQUcsWUFBWSxVQUFVLElBQUksR0FBRyxZQUFZLFdBQVcsSUFBSSxHQUFHLFlBQVksaUJBQWlCLEVBQUU7WUFFdEcsQ0FBQztZQUFDLE1BQWMsQ0FBQyxVQUFVLEdBQUcsYUFBYSxDQUFBO1lBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7U0FDbkM7SUFDSCxDQUFDO0lBRUQsTUFBTSxHQUFHLEdBQXVCO1FBQzlCLFNBQVMsQ0FBQyxPQUFPO1lBQ2YsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Z0JBQ3JDLE9BQU8sRUFBRSxDQUFBO2FBQ1Y7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO2FBQ2pFO1FBQ0gsQ0FBQztRQUNELE9BQU8sQ0FBQyxPQUFPO1lBQ2IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQWUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQzNFLENBQUM7UUFDRCxTQUFTLENBQUMsT0FBTztZQUNmLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFzQixFQUFFLEVBQUU7Z0JBQzVELE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDdkIsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDO1FBQ0QsV0FBVyxDQUFDLE9BQU87WUFDakIsTUFBTSxNQUFNLEdBQUcsT0FBTyxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBO1lBRXZFLElBQUksTUFBTSxDQUFDLFVBQVUsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7YUFDYjtpQkFBTTtnQkFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2FBQ25CO1FBQ0gsQ0FBQztRQUNELEtBQUs7WUFDSCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDaEIsQ0FBQztLQUNGLENBQUE7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY3JpcHRpbmdUcmFuc3BvcnQgfSBmcm9tICcuLi9qc29uLXJwYy90eXBlcydcblxuZXhwb3J0IGludGVyZmFjZSBJV2ViU29ja2V0RXZlbnRNYXAge1xuICBjbG9zZTogYW55XG4gIGVycm9yOiBhbnlcbiAgbWVzc2FnZTogeyBkYXRhOiBhbnkgfVxuICBvcGVuOiBhbnlcbn1cblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBzaG91bGQgYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBCcm93c2VycyBpbnRlcmZhY2VcbiAqIGFuZCBucG0gd3MgcGFja2FnZSBmb3Igc2VydmVyc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElXZWJTb2NrZXQge1xuICBDT05ORUNUSU5HOiBudW1iZXJcbiAgT1BFTjogbnVtYmVyXG4gIENMT1NJTkc6IG51bWJlclxuICBDTE9TRUQ6IG51bWJlclxuXG4gIHJlYWR5U3RhdGU6IG51bWJlclxuXG4gIGNsb3NlKGNvZGU/OiBudW1iZXIsIGRhdGE/OiBzdHJpbmcpOiB2b2lkXG5cbiAgc2VuZChkYXRhOiBhbnksIGNiPzogKGVycjogRXJyb3IpID0+IHZvaWQpOiB2b2lkXG4gIHNlbmQoZGF0YTogYW55LCBvcHRpb25zOiBhbnksIGNiPzogKGVycjogRXJyb3IpID0+IHZvaWQpOiB2b2lkXG5cbiAgdGVybWluYXRlPygpOiB2b2lkXG5cbiAgYWRkRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgSVdlYlNvY2tldEV2ZW50TWFwPihcbiAgICB0eXBlOiBLLFxuICAgIGxpc3RlbmVyOiAoZXY6IElXZWJTb2NrZXRFdmVudE1hcFtLXSkgPT4gYW55LFxuICAgIG9wdGlvbnM/OiBhbnlcbiAgKTogdm9pZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gV2ViU29ja2V0VHJhbnNwb3J0KHNvY2tldDogSVdlYlNvY2tldCk6IFNjcmlwdGluZ1RyYW5zcG9ydCB7XG4gIGNvbnN0IHF1ZXVlOiAoc3RyaW5nIHwgVWludDhBcnJheSB8IEFycmF5QnVmZmVyIHwgU2hhcmVkQXJyYXlCdWZmZXIgfCBCdWZmZXIpW10gPSBbXVxuXG4gIHNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgZnVuY3Rpb24oKSB7XG4gICAgZmx1c2goKVxuICB9KVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmIChzb2NrZXQucmVhZHlTdGF0ZSA9PT0gc29ja2V0Lk9QRU4pIHtcbiAgICAgIHF1ZXVlLmZvckVhY2goJCA9PiBzZW5kKCQpKVxuICAgICAgcXVldWUubGVuZ3RoID0gMFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbmQobXNnOiBzdHJpbmcgfCBVaW50OEFycmF5IHwgQXJyYXlCdWZmZXIgfCBTaGFyZWRBcnJheUJ1ZmZlciB8IEJ1ZmZlcikge1xuICAgIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xuICAgICAgc29ja2V0LnNlbmQobXNnLCB7IGJpbmFyeTogZmFsc2UgfSlcbiAgICB9IGVsc2UgaWYgKG1zZyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgbXNnIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgbXNnIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzZW1pY29sb25cbiAgICAgIDsoc29ja2V0IGFzIGFueSkuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcidcbiAgICAgIHNvY2tldC5zZW5kKG1zZywgeyBiaW5hcnk6IHRydWUgfSlcbiAgICB9XG4gIH1cblxuICBjb25zdCBhcGk6IFNjcmlwdGluZ1RyYW5zcG9ydCA9IHtcbiAgICBvbkNvbm5lY3QoaGFuZGxlcikge1xuICAgICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09PSBzb2NrZXQuT1BFTikge1xuICAgICAgICBoYW5kbGVyKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4gaGFuZGxlcigpLCB7IG9uY2U6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uRXJyb3IoaGFuZGxlcikge1xuICAgICAgc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGVycjogRXJyb3JFdmVudCkgPT4gaGFuZGxlcihlcnIuZXJyb3IpKVxuICAgIH0sXG4gICAgb25NZXNzYWdlKGhhbmRsZXIpIHtcbiAgICAgIHNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKG1lc3NhZ2U6IHsgZGF0YTogYW55IH0pID0+IHtcbiAgICAgICAgaGFuZGxlcihtZXNzYWdlLmRhdGEpXG4gICAgICB9KVxuICAgIH0sXG4gICAgc2VuZE1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgY29uc3QgdG9TZW5kID0gbWVzc2FnZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBtZXNzYWdlLmJ1ZmZlciA6IG1lc3NhZ2VcblxuICAgICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09PSBzb2NrZXQuT1BFTikge1xuICAgICAgICBzZW5kKHRvU2VuZClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlLnB1c2godG9TZW5kKVxuICAgICAgfVxuICAgIH0sXG4gICAgY2xvc2UoKSB7XG4gICAgICBzb2NrZXQuY2xvc2UoKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcGlcbn1cbiJdfQ==