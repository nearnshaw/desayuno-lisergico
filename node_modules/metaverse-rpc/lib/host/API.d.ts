export declare function exposeMethod<T extends API>(target: T, propertyKey: keyof T, descriptor: TypedPropertyDescriptor<ExposableMethod>): void;
export declare function getExposedMethods<T extends API>(instance: T): Set<keyof T>;
export declare function rateLimit<T>(interval?: number): (target: T, propertyKey: string, descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<any>>) => {
    value: (this: T) => any;
    enumerable?: boolean | undefined;
    configurable?: boolean | undefined;
    writable?: boolean | undefined;
    get?: (() => (...args: any[]) => Promise<any>) | undefined;
    set?: ((value: (...args: any[]) => Promise<any>) => void) | undefined;
};
export declare function throttle<T>(callLimit: number, interval?: number): (target: T, propertyKey: string, descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<any>>) => {
    value: (this: T) => any;
    enumerable?: boolean | undefined;
    configurable?: boolean | undefined;
    writable?: boolean | undefined;
    get?: (() => (...args: any[]) => Promise<any>) | undefined;
    set?: ((value: (...args: any[]) => Promise<any>) => void) | undefined;
};
export declare type APIOptions = {
    apiName: string;
    system: any;
    on(event: string, handler: <A, O extends object>(params: Array<A> | O) => void): void;
    notify(event: string, params?: Object | Array<any>): void;
    expose(event: string, handler: <A, O extends object>(params: Array<A> | O) => Promise<any>): void;
    getAPIInstance<X>(component: {
        new (options: APIOptions): X;
    }): X;
    getAPIInstance(name: string): API | null;
};
export declare type APIClass<T> = {
    new (options: APIOptions): T;
};
export declare type ExposableMethod = (...args: any[]) => Promise<any>;
export interface API {
    apiDidMount?(): Promise<void> | void;
    apiWillUnmount?(): Promise<void> | void;
}
export declare abstract class API {
    protected options: APIOptions;
    static expose: typeof exposeMethod;
    constructor(options: APIOptions);
    static factory(ctor: APIClass<API>, options: APIOptions): API;
}
export declare abstract class SubscribableAPI extends API {
    abstract subscribe(event: string): Promise<void>;
}
export interface ISubscribableAPI {
    subscribe(event: string): Promise<void>;
    unsubscribe(event: string): Promise<void>;
    onSubscribedEvent(fn: (data: any) => void): void;
}
