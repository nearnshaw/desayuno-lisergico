import { TransportBasedServer } from './TransportBasedServer';
import { APIClass, API, APIOptions } from './API';
import { ScriptingTransport } from '../common/json-rpc/types';
export declare enum ScriptingHostEvents {
    systemWillUnmount = "systemWillUnmount",
    systemWillEnable = "systemWillEnable",
    systemDidUnmount = "systemDidUnmount"
}
export declare function getAPIName(klass: APIClass<API>): string | null;
export declare function registerAPI(apiName: string): (klass: APIClass<API>) => void;
export declare class ScriptingHost extends TransportBasedServer {
    unmounted: boolean;
    apiInstances: Map<string, API>;
    private constructor();
    static fromTransport(transport: ScriptingTransport): Promise<ScriptingHost>;
    enable(): void;
    getAPIInstance<X>(api: {
        new (options: APIOptions): X;
    }): X;
    getAPIInstance(name: string): API | null;
    unmount(): void;
    protected initializeAPI<X extends API>(ctor: {
        new (options: APIOptions): X;
        factory?(ctor: {
            new (options: APIOptions): X;
        }, options: APIOptions): X;
    }): X;
    private RPCLoadAPIs;
}
